{"version":3,"file":"index.071d1c8c.js","sources":["../../src/views/Settings/Appearance.vue","../../src/views/Settings/index.vue"],"sourcesContent":["<script setup>\nimport {reactive, computed} from 'vue';\nimport {useStore} from 'vuex';\n\nconst store = useStore();\n\n// color\nconst colorList = reactive(['#FF9A76', '#FF9292', '#42B983', '#7579E7', '#19D3DA', '#056676', '#835858']);\nconst setColor = (color) => store.commit('settings/setColor', color);\nconst colorActive = computed({\n\tget: () => store.state.settings.color,\n\tset: setColor,\n});\n\n// theme\nconst themeList = ['Light', 'Dark', 'Follow System'];\nconst themeActive = computed({\n\tget: () => store.state.settings.theme,\n\tset: (theme) => store.commit('settings/setTheme', theme),\n});\n</script>\n\n<template>\n  <div class=\"setting-item optional-item\">\n    <span>Theme</span>\n    <el-radio-group\n      v-model=\"themeActive\"\n      size=\"mini\"\n    >\n      <el-radio-button\n        v-for=\"theme in themeList\"\n        :key=\"`theme-${theme}`\"\n        :label=\"theme\"\n      />\n    </el-radio-group>\n  </div>\n  <div class=\"setting-item optional-item\">\n    <span>Color</span>\n    <div class=\"color-list\">\n      <div class=\"color-container\">\n        <el-color-picker\n          v-model=\"colorActive\"\n          popper-class=\"setting-color-picker-popper\"\n          :size=\"colorList.includes(colorActive) ? 'mini' : 'small'\"\n        />\n      </div>\n      <div\n        v-for=\"(color, index) in colorList\"\n        :key=\"`color-${String(index)}`\"\n        class=\"color-container\"\n      >\n        <div\n\n          class=\"color\"\n          :class=\"{active: color === colorActive}\"\n          :style=\"{background: color}\"\n          @click=\"setColor(color)\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.color-container {\n  height: 40px;\n  width: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.color {\n  width: 24px;\n  height: 24px;\n  border-radius: 100%;\n  cursor: pointer;\n  transition: width ease .3s, height ease .3s;\n\n  &.active {\n    width: 32px;\n    height: 32px;\n  }\n}\n\n.color-list {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n\n  &:deep(.el-color-picker) {\n    transition: width ease .3s, height ease .3s;\n\n    &.el-color-picker--mini {\n      height: 24px;\n\n      .el-color-picker__trigger {\n        height: 24px;\n        width: 24px;\n      }\n    }\n\n    .el-color-picker__trigger {\n      transition: width ease .3s, height ease .3s;\n      padding: 0;\n      border: 0;\n    }\n\n    .el-color-picker__color {\n      border: 0;\n    }\n\n    .el-color-picker__color-inner {\n      border-radius: 50%;\n    }\n  }\n}\n</style>\n\n<style lang=\"scss\">\n.setting-color-picker-popper {\n  .el-color-dropdown__btns {\n    .el-color-dropdown__link-btn {\n      display: none;\n    }\n  }\n}\n</style>\n","<script>\nexport default {\n  name: 'UserSettings',\n};\n</script>\n\n<script setup>\nimport Appearance from './Appearance.vue';\nimport Application from './Application.vue';\n\nconst settings = [\n  {name: 'Appearance', component: Appearance},\n  {name: 'Application', component: Application},\n];\n</script>\n\n<template>\n  <div id=\"view-settings\">\n    <el-scrollbar view-class=\"view-settings-view\">\n      <h1>Settings</h1>\n      <div\n        v-for=\"setting in settings\"\n        :key=\"setting.name\"\n        class=\"setting-part card-block\"\n      >\n        <h4>{{ setting.name }}</h4>\n        <component :is=\"setting.component\" />\n      </div>\n    </el-scrollbar>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n#view-settings {\n  height: 100%;\n  box-sizing: border-box;\n  font-size: 18px;\n  user-select: none;\n  -webkit-user-drag: none;\n\n  :deep(.view-settings-view) {\n    max-width: 720px;\n    margin: 0 auto;\n  }\n\n  h1 {\n    font-size: 32px;\n    margin: 20px 16px;\n  }\n}\n\n.setting-part {\n  display: flex;\n  flex-direction: column;\n  margin: 16px;\n\n  h4 {\n    font-size: 20px;\n    margin: 12px 0;\n    padding: 0 16px;\n  }\n\n  :deep(.setting-item) {\n    padding: 0 16px;\n    min-height: 50px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    transition: background-color ease .3s, color ease .3s;\n\n    @media screen and (max-width: 768px) {\n      &.optional-item {\n        padding: 8px 16px;\n        flex-direction: column;\n        align-items: flex-start;\n        justify-content: space-around;\n        gap: 8px;\n      }\n    }\n\n    &:hover {\n      background: var(--hover);\n\n      .setting-item-placeholder {\n        color: var(--main);\n      }\n    }\n\n    &.setting-go {\n      cursor: pointer;\n    }\n\n    .setting-item-placeholder {\n      color: var(--font-color-regular);\n      transition: color ease .3s;\n    }\n  }\n}\n</style>\n"],"names":[],"mappings":"8lBAIA,67CCMA"}